generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visitedAt DateTime

  email String? @unique
  image String?
  name  String?

  locale String?

  accountProvider String?
}

model RuleOption {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type String?

  ruleId Int
  rule   Rule @relation(fields: [ruleId], references: [id])

  @@unique([name, ruleId])
}

model RuleReplacedBy {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  ruleId Int
  rule   Rule @relation(fields: [ruleId], references: [id])

  @@unique([name, ruleId])
}

model Rule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                 String
  category             String?
  deprecated           Boolean
  description          String?
  fixable              String?
  hasSuggestions       Boolean
  requiresTypeChecking Boolean
  type                 String?
  linkRuleDoc          String?

  linterId Int
  linter   Linter @relation(fields: [linterId], references: [id])

  ruleConfigs RuleConfig[]
  options     RuleOption[]
  replacedBy  RuleReplacedBy[]

  @@unique([name, linterId])
}

model Config {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  linterId Int
  linter   Linter @relation(fields: [linterId], references: [id])

  ruleConfigs RuleConfig[]

  @@unique([name, linterId])
}

model RuleConfig {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  severity String

  linterId Int
  configId Int
  ruleId   Int
  linter   Linter @relation(fields: [linterId], references: [id])
  config   Config @relation(fields: [configId], references: [id])
  rule     Rule   @relation(fields: [ruleId], references: [id])

  @@unique([ruleId, configId])
}

model PackageKeyword {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  @@unique([name, packageId])
}

model PackageVersion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version     String
  publishedAt DateTime

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  @@unique([version, packageId])
}

// Package. Corresponds to an npm package or package from another ecosystem.
model Package {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String
  description      String?
  packageCreatedAt DateTime
  packageUpdatedAt DateTime

  countContributors    Int
  countForks           Int
  countIssues          Int
  countPrs             Int
  countStars           Int
  countWatching        Int
  countWeeklyDownloads Int

  repositoryDirectory String?
  linkRepository      String?
  linkHomepage        String?
  linkBugs            String?
  emailBugs           String?

  keywords PackageKeyword[]
  versions PackageVersion[]

  ecosystemId Int
  ecosystem   Ecosystem @relation(fields: [ecosystemId], references: [id])

  // A package might be a linter.
  linter   Linter?
  linterId Int?    @unique

  @@unique([name, ecosystemId])
}

// Like core eslint or an eslint plugin.
model Linter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rules       Rule[]
  ruleConfigs RuleConfig[]
  configs     Config[]

  // Linting framework this linter uses.
  lintFrameworkId Int
  lintFramework   LintFramework @relation("LintFrameworkLinters", fields: [lintFrameworkId], references: [id])

  // Opposite relation if this is the linter for the framework core.
  lintFrameworkForCore LintFramework? @relation("LintFrameworkForCore")

  // Package for the linter.
  packageId Int     @unique
  package   Package @relation(fields: [packageId], references: [id])
}

model LintFramework {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  ecosystemId Int
  ecosystem   Ecosystem @relation(fields: [ecosystemId], references: [id])

  // Linters using this linting framework.
  linters Linter[] @relation("LintFrameworkLinters")

  // Linter for the framework core.
  linterId Int?    @unique
  linter   Linter? @relation("LintFrameworkForCore", fields: [linterId], references: [id])

  @@unique([name, ecosystemId])
}

model Ecosystem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String @unique
  description    String
  linkRepository String
  linkHomepage   String

  packages      Package[]
  LintFramework LintFramework[]
}
