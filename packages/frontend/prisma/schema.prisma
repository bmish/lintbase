generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model RuleOptionChoice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  ruleOptionId Int
  ruleOption   RuleOption @relation(fields: [ruleOptionId], references: [id])

  @@unique([name, ruleOptionId])
}

model RuleOption {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  type          String?
  required      Boolean?
  deprecated    Boolean?
  default       String?
  description   String?
  descriptionAI String?

  choices RuleOptionChoice[]

  ruleId Int
  rule   Rule @relation(fields: [ruleId], references: [id])

  @@unique([name, ruleId])
}

model RuleReplacedBy {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  ruleId Int
  rule   Rule @relation(fields: [ruleId], references: [id])

  @@unique([name, ruleId])
}

model Rule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                 String
  category             String?
  deprecated           Boolean
  description          String?
  descriptionAI        String?
  fixable              String?
  hasSuggestions       Boolean
  requiresTypeChecking Boolean
  type                 String?
  linkRuleDoc          String?
  schema               Json?

  linterId Int
  linter   Linter @relation(fields: [linterId], references: [id])

  ruleConfigs       RuleConfig[]
  options           RuleOption[]
  replacedBys       RuleReplacedBy[]
  localPackageRules LocalPackageRule[]

  @@unique([name, linterId])
}

model Config {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  description   String?
  descriptionAI String?

  linterId Int
  linter   Linter @relation(fields: [linterId], references: [id])

  ruleConfigs         RuleConfig[]
  localPackageConfigs LocalPackageConfig[]

  @@unique([name, linterId])
}

model RuleConfig {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  severity String

  linterId Int
  configId Int
  ruleId   Int
  linter   Linter @relation(fields: [linterId], references: [id])
  config   Config @relation(fields: [configId], references: [id])
  rule     Rule   @relation(fields: [ruleId], references: [id])

  @@unique([ruleId, configId])
}

model Processor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  description   String?
  descriptionAI String?

  linterId Int
  linter   Linter @relation(fields: [linterId], references: [id])

  @@unique([name, linterId])
}

model PackageKeyword {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  @@unique([name, packageId])
}

model PackageVersion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version     String
  publishedAt DateTime

  isLoaded Boolean @default(false)

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  tags PackageVersionTag[]

  @@unique([version, packageId])
}

model PackageVersionTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  packageVersionId Int
  packageVersion   PackageVersion @relation(fields: [packageVersionId], references: [id])

  @@unique([name, packageVersionId])
}

model PackageEngine {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  value String

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  @@unique([name, packageId])
}

model PackagePeerDependency {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  value String

  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  @@unique([name, packageId])
}

// model NpmDownloads {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   count Int

//   dateStart DateTime
//   dateEnd   DateTime

//   packageId Int
//   package   Package @relation(fields: [packageId], references: [id])

//   @@unique([packageId, dateStart, dateEnd])
// }

// Package. Corresponds to an npm package or package from another ecosystem.
model Package {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String
  description      String?
  descriptionAI    String?
  packageCreatedAt DateTime?
  packageUpdatedAt DateTime?

  countDownloadsThisWeek       Int?
  countDownloadsLastWeek       Int?
  countDownloadsWeekOverWeek   Int?
  percentDownloadsWeekOverWeek Int?

  repositoryDirectory String?
  linkRepository      String?
  linkHomepage        String?
  linkBugs            String?
  emailBugs           String?

  license          String?
  sizeUnpacked     Int?
  countFiles       Int?
  countMaintainers Int?

  keywords         PackageKeyword[]
  versions         PackageVersion[]
  engines          PackageEngine[]
  peerDependencies PackagePeerDependency[]

  ecosystemId Int
  ecosystem   Ecosystem @relation(fields: [ecosystemId], references: [id])

  // A package might be a linter.
  linter   Linter? @relation("LinterPackage")
  linterId Int?    @unique

  // A package might be linted by various linters.
  linters Linter[] @relation("LinterPackagesFor")

  // We might know the repository a package lives in.
  repositoryId Int?
  repository   Repository? @relation(fields: [repositoryId], references: [id])

  deprecated             Boolean   @default(false)
  deprecatedReason       String?
  deprecatedReplacements Package[] @relation("PackageReplacements") // Packages replacing this package.
  deprecatedReplaced     Package[] @relation("PackageReplacements") // Packages replaced by this package.

  @@unique([name, ecosystemId])
}

// Like core eslint or an eslint plugin.
model Linter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rules       Rule[]
  ruleConfigs RuleConfig[]
  configs     Config[]
  processors  Processor[]

  descriptionAI String?

  // Linting framework this linter uses.
  lintFrameworkId Int
  lintFramework   LintFramework @relation("LintFrameworkLinters", fields: [lintFrameworkId], references: [id])

  // Opposite relation if this is the linter for the framework core.
  lintFrameworkForCore LintFramework? @relation("LintFrameworkForCore")

  // Package for the linter.
  packageId Int     @unique
  package   Package @relation("LinterPackage", fields: [packageId], references: [id])

  // This linter could be intended to lint various packages.
  lintees Package[] @relation("LinterPackagesFor")

  // Instances of repositories using this linter.
  localPackageLinters LocalPackageLinter[]
}

model LintFramework {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  ecosystemId Int
  ecosystem   Ecosystem @relation(fields: [ecosystemId], references: [id])

  // Linters using this linting framework.
  linters Linter[] @relation("LintFrameworkLinters")

  // Linter for the framework core.
  linterId Int?    @unique
  linter   Linter? @relation("LintFrameworkForCore", fields: [linterId], references: [id])

  // Instances of repositories using this framework.
  localPackageLintFrameworks LocalPackageLintFramework[]

  @@unique([name, ecosystemId])
}

model Ecosystem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String @unique
  description    String
  linkRepository String
  linkHomepage   String

  packages       Package[]
  lintFrameworks LintFramework[]
}

model UserWaitlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
}

model User {
  id        String   @id // TODO: Switch to a separate field for idGithub
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visitedAt DateTime

  email String? @unique
  image String?
  name  String?

  locale String?

  accountProvider String?

  repositories Repository[]

  stars          StarredRepositories[]
  checkedStarsAt DateTime?
}

model Repository {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User?   @relation(fields: [ownerId], references: [id])
  ownerId String?

  fullName      String  @unique
  name          String
  description   String?
  descriptionAI String?

  commitSha   String?
  committedAt DateTime?

  // TODO: move per-user data to a separate model.
  importedAt DateTime?
  scannedAt  DateTime?

  language String?
  size     Int?

  githubId        Int?      @unique
  githubCreatedAt DateTime?
  githubUpdatedAt DateTime?
  githubPushedAt  DateTime?

  archived      Boolean?
  disabled      Boolean?
  visibility    String?
  defaultBranch String?

  private Boolean?
  fork    Boolean?

  countForks      Int?
  countWatchers   Int?
  countStargazers Int?

  urlHtml     String?
  urlGit      String?
  urlSsh      String?
  urlClone    String?
  urlHomepage String?

  // A repository can contain various packages.
  package Package[]

  stars StarredRepositories[]

  localPackages LocalPackage[]
}

model StarredRepositories {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId Int

  @@unique([userId, repositoryId])
}

model LocalPackage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Repository containing this local package.
  repositoryId Int
  repository   Repository @relation(fields: [repositoryId], references: [id])

  // TODO: name of package (from package.json)

  path         String // Path to this local package folder in the repository.
  pathManifest String // Path to the manifest config file for this package.

  // Instances of things in this local repository package.
  localPackageLintFrameworks LocalPackageLintFramework[]
  localPackageLinters        LocalPackageLinter[]
  localPackageRules          LocalPackageRule[]
  localPackageConfigs        LocalPackageConfig[]

  @@unique([repositoryId, path])
}

model LocalPackageLintFramework {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  localPackageId Int
  localPackage   LocalPackage @relation(fields: [localPackageId], references: [id])

  lintFrameworkId Int
  lintFramework   LintFramework @relation(fields: [lintFrameworkId], references: [id])

  pathConfig String?

  version     String?
  isPresent   Boolean @default(false)
  isSuggested Boolean @default(false)

  @@unique([localPackageId, lintFrameworkId])
}

model LocalPackageLinter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  localPackageId Int
  localPackage   LocalPackage @relation(fields: [localPackageId], references: [id])

  linterId Int
  linter   Linter @relation(fields: [linterId], references: [id])

  version     String?
  isPresent   Boolean @default(false)
  isSuggested Boolean @default(false)

  @@unique([localPackageId, linterId])
}

model LocalPackageRule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  localPackageId Int
  localPackage   LocalPackage @relation(fields: [localPackageId], references: [id])

  ruleId Int
  rule   Rule @relation(fields: [ruleId], references: [id])

  countViolations  Int?
  countAutofixable Int?

  isEnabled   Boolean @default(false) // TODO: remove, redundant with severity
  severity    String? // TODO: use same convention to store this as RuleConfig severity
  isSuggested Boolean @default(false)

  @@unique([localPackageId, ruleId])
}

model LocalPackageConfig {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  localPackageId Int
  localPackage   LocalPackage @relation(fields: [localPackageId], references: [id])

  configId Int
  config   Config @relation(fields: [configId], references: [id])

  countViolations  Int?
  countAutofixable Int?

  isEnabled   Boolean @default(false)
  isSuggested Boolean @default(false)

  @@unique([localPackageId, configId])
}
